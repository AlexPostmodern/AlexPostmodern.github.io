git status - просмотр статуса файлов в репозитории
git add test.txt - добавить в очередь для комита какой то файл
git add * - добавить в очередь для комита все изменненые файлы в репозитории
git commit - закомитить
git log - история коммитов
git log --pretty=oneline - в олдну линию каждый коммит
git log ---pretty=format:"%h - %s : %ad [ %an ]" - собственный формат
--date=short - короткий формат даты
git checkout <hash> - смена ветки
gitk - графический интерфейс
git reset - возврат к тому состоянию, к которому мы хотим 
(файла, комита, полностью ветки)
git reset HEAD index.txt - вернуть файл к последнему состоянию(к последнему комиту)
или убрать индексирвоание файла, если изменение не нужны, убрать из очереди комита
вместо хеад можно написать комит, к которому нужно вернуть файл
git checkout index.txt вернет состояние, которое было в полседнем комите
и git уберет последние изменения
git revert HEAD --no-edit - удаление последнего коммита
означает что мы хотим вернуть наш файл к месту (HEAD-самое последнее его состояние)

ЧТОБЫ ВЕРНУТЬ К СОСТОЯНИЮ НА КАКОЙ ТО КОМИТ НУЖНО:

выбрать комит и выбрать файл, который мы хотим вернуть
git reset 9ee76287b738d455cc98018faa25ca2e7bb8bfdc index.txt

подтвердить изменения
git checkout index.txt

сделать коммит
git commit -m "some comment"

git revert --abort  - отмена попытки удаления (при конфликте)
git branch - посомтреть все ветки в локальном репозитории
git checkout -b newbrabch - создание новой ветки с названием newbranch
ls - показывает все файлы в ветке
git merge dev - слияние двух веток (ветка сливается с веткой которая сейчас открыта)
merge conflict бывает при слиянии двух веток, в которых есть одинаковый файл, 
но изменненый в обоих ветках, тогда можно открыть файл через встроенную программу
и изменить его как нужно и закомитить

ЧТОБЫ ВЫЙТИ ИЗ КОМЕНТРАИЯ НАЖИМАЕМ SHIFT+: И ПИШЕМ wq - записать и выйти
git rebase <имя ветки> - что то вытянуть из общей ветки по средствам 
записи поверх, а потом уже запись всех комитов которые были
rebase - помогает избегать конфликтов при обычном merge 
git clone <ссылка с репозитория GitHub> - скачать с удаленного репозитория данные

выгурзить свои данные с репозитория на удаленный
git remote <ссылка с репозитория GitHub>
git push -u origin master
или просто git push потом когда уже залил что то на свой удаленный рипозитрий
git push origin dev - загрузить на гит хаб определенную ветку (dev)
git pull origin dev- вытащить данные с удаленного рипозитория, 
когда их изменил другой разработчик (dev имя ветки)
git pull --rebase origin master - вытягиваем данные 
но не слиянием, как делается по умолчанию
а методом rebase, тоже самое что и просто rebase
git stash - спрятать изменения "в корзину"в каком то файле не комитя их
got stash pop - вытащить из корзины последний стеш
git stash list - посмотреть список стешев "корзину"
git stash drop - удалить из корзины последний стеш(не вытащив его)
git stash clear - очистить корзину(удаляет изменения, которые туда помещены, 
достать невозможно), таким образом мне кажется можно сувать туда ненужные изменения, 
которые еще не комичены и чистить корзину
git restore dex.txt - отмена изменений если комит еще не сделан
git remote - посмотреть сервера на которых лежат удаленные рипозитории
origin - название сервера по умолчанию, на котором рипозиторий
